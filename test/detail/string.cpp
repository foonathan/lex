// Copyright (C) 2018-2019 Jonathan MÃ¼ller <jonathanmueller.dev@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level directory of this distribution.

#include <foonathan/lex/detail/string.hpp>

#include <doctest.h>

namespace
{
template <char... Chars>
struct string
{
    static constexpr auto size = sizeof...(Chars);
};

template <char... Chars>
constexpr std::size_t string<Chars...>::size;
} // namespace

TEST_CASE("string macro")
{
    using manual
        = string<'0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0',
                 '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0',
                 '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0',
                 '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0',
                 '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0',
                 '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0',
                 '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0',
                 '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0',
                 '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0',
                 '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0',
                 '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0',
                 '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0',
                 '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0',
                 '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0',
                 '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0',
                 '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'>;
    static_assert(manual::size == 256, "");
    using macro = FOONATHAN_LEX_DETAIL_STRING(string, "0000000000000000"
                                                      "0000000000000000"
                                                      "0000000000000000"
                                                      "0000000000000000"
                                                      "0000000000000000"
                                                      "0000000000000000"
                                                      "0000000000000000"
                                                      "0000000000000000"
                                                      "0000000000000000"
                                                      "0000000000000000"
                                                      "0000000000000000"
                                                      "0000000000000000"
                                                      "0000000000000000"
                                                      "0000000000000000"
                                                      "0000000000000000"
                                                      "0000000000000000");

    REQUIRE(macro::size == 256);
    REQUIRE(std::is_same<manual, macro>::value);
}
